import click
import logging
import numpy as np
import pandas as pd


class NLR:
    """
    A class to represent a NLR sequences as an array that is updated if blast hit covers that position of the sequence
    
    Attributes
    ----------
    name: the name of the nlr sequence in the fasta file
    coverage_array: an array of zeroes equal to the length of the NLR sequence
    coverage: the percentage of array positions containing a non-zero value
    
    Methods
    -------
    add_coverage(start, end)
        add the coverage from a blast hit to the coverage_array
    
    get_covergae()
        calculates the percentage of non-zero values in the coverage_array
    """
    
    def __init__(self, name, seq_length):
        self.name = name
        self.coverage_array = np.zeros(seq_length)
        self.coverage = 0

    def add_coverage(self, start, end):
        """
        add coverage of a blast hit to the coverage_array
        
        :param start: start position of the blast hit
        :param end: end position of the blast hit
        :return None: updates the coverage_array
        """
        
        for n in list(range(start - 1, end, 1)):
            self.coverage_array[n] += 1

    def get_coverage(self):
        '''
        calculates the percentage of non-zero values in the coverage_array
        
        return: percentage of non-zero values in the coverage_array
        '''
        return (np.count_nonzero(self.coverage_array) * 100) / len(self.coverage_array)


def load_NLR_data(fasta_file):
    '''
    Load NLR sequence data into NLR classes
    
    :param fasta_file: FASTA file of NLR sequences
    :return dictionary: a dictionary of all NLR sequences as NLR classes
    '''
    NLR_dict = {}
    logging.info("loading NLR sequences...")
    with open(fasta_file) as file:
        for line in file:
            if line.startswith(">"):
                header = line.split()
                NLR_dict[header[0][1:]] = len(next(file))

    return {k: NLR(k, v) for k, v in NLR_dict.items()}


def load_BLAST_data(blast_table):
    '''
    load BLAST data and extract the subject, start and end positions for each hit
    
    :param blast_table: raw BLAST data
    :return BLAST_list: A list of lists where each list represents NLR target and start/end positions of a unique BLAST hit
    '''
    BLAST_list = []
    logging.info("loading BLAST data...")
    with open(blast_table) as file:
        for n, line in enumerate(file):
            row = line.split()
            positions = [int(row[8]), int(row[9])]
            BLAST_list.append([row[1], min(positions), max(positions)])

    return BLAST_list


def calculate_mean_NLR_coverage(nlr_class_dict, blast_array):
    '''
    Calculates the average % of all NLRs covered by the BLAST results
    
    :param nlr_class_dict: a dictionary containing the NLR class for each NLR sequence
    :param blast_array: The array of blast start/end positions for all NLR BLAST hits
    :return int: The average of percentage of each NLR covered by the BLAST results
    '''
    
    logging.info('calculating NLR coverage...')
    [nlr_class_dict[val[0]].add_coverage(val[1], val[2]) for val in blast_array]
    coverage_array = np.asarray([nlr.get_coverage() for nlr in nlr_class_dict.values()])
    return coverage_array.mean()


def determine_assembly_coverage(nlr, blast):
    '''
    calculates average NLR coverage for a given assembly
    
    :param nlr: NLR sequence fasta file from a reference genome
    :param blast: BLAST data of an assembly aligned to NLR sequences from the same reference genome as above
    :return list: mean coverage of the assembly and total number of contigs in the assembly 
    
    '''
    nlr_data = load_NLR_data(nlr)
    blast_data = load_BLAST_data(blast)
    coverage_mean = calculate_mean_NLR_coverage(nlr_data, blast_data)
    total_contigs = len(pd.read_csv(blast, header=None, sep="\t")[0].unique())
    logging.info(f"Average NLR Covereage: {coverage_mean}")
    logging.info(f"Total Contigs: {total_contigs}")
    return [coverage_mean, total_contigs]


@click.command()
@click.option('-d', '--draft', type=str, required=True, help="draft assembly BLAST alignment")
@click.option('-f', '--final', type=str, required=True, help="final assembly BLAST alignment")
@click.option('-n', '--nlr', type=str, required=True, help="NLR Annotator file")
def nlr_coverage(draft, final, nlr):
    """
    
    :param nlr: NLR sequences from a reference genome
    :param draft: a draft assembly
    :param final: a final assembly generated by NLR-Assembler
    :return None: output is a CSV file containing all results
    """
    logging.info("----- running NLR-Assembler nlr-coverage -----")
    draft_assembly_stats = determine_assembly_coverage(nlr, draft)
    final_assembly_stats = determine_assembly_coverage(nlr, final)

    cc = pd.DataFrame([draft_assembly_stats, final_assembly_stats], index=["draft", "final"], columns=["coverage of NLRs (%)", "contigs"]).transpose()
    cc["PD"] = [cc.final.iloc[0]-cc.draft.iloc[0], (cc[['draft', 'final']].pct_change(axis=1)['final'][1] * 100)]
    cc.to_csv("NLR_coverage.txt", sep="\t")
