import logging
import pickle
import sys

import click
import pandas as pd

logging.basicConfig(stream=sys.stdout, format='%(asctime)s - %(message)s', datefmt='%d-%b-%y %H:%M:%S',
                    level=logging.INFO)


def load_pickled_data(pickle_file):
    """
    Load pickled list of lists
    :param pickle_file: pickle file generate by group_by_cosine containing list of grouped contigs
    :return: unpickled list of grouped contigs
    """
    logging.info('loading contig grouping data...')
    with open(pickle_file, 'wb') as f:
        contig_grouping = pickle.load(f)

    return contig_grouping


def load_annotation_data(NLR_annotation):
    """
    Load NLR annotations as two dictionary with the strand and annotation for each contig
    E.g {contig_1 : CC-NBARC-LRR} and {contig_1 : +}
    :param NLR_annotation: Path to file for NLR annotator output for assembly
    :return: Dicitonaries for the strand and annotation of each contig individually
    """
    logging.info('loading NLR annotations')
    contig_strand_dictionary = {}
    contig_annotation_dictionary = {}
    with open(NLR_annotation) as annotations:
        for line in annotations:
            line_data = line.split("\t")
            contig_strand_dictionary[line_data[0]] = line_data[5]
            contig_annotation_dictionary[line_data[0]] = line_data[2]

    return contig_annotation_dictionary, contig_strand_dictionary


def filter_by_strand(strand_info, contig_groups):
    """
    Sorts a list of grouped contigs by the strand each contig is on using information on the contigs
    generated by NLR annotator. This takes place in 4 steps:

        1. The list is split into list with a length of 1, A, and a length greater than 1, B
        2. B is divided into list where all contigs have the same strand, C and mixed strands, D
        3. Each list in D is split into positive and negative strand lists and appended to a new list, E
        4. Lists A,C and E are combined to generate a list of contigs grouped by strand

    :param strand_info: Dictionary with the strand of each contig generated by load_annotation_data
    :param contig_groups: list of lists of grouped contigs loaded from pickle with load_pickled_data
    :return: list of grouped contigs that have been sorted into subgroups (new contig lists) by strand
    """
    logging.info('sorting contigs by strand...')
    singletons = []
    grouped = []  #
    same_stranded_groups = []
    mix_stranded_groups = []  #
    seperated_stranded_groups = []

    for val in contig_groups:
        if len(val) == 1:
            singletons.append(val)
        else:
            grouped.append(val)

    for val in grouped:
        strand_group = [strand_info[n] for n in val]

        if len(set(strand_group)) == 1:
            same_stranded_groups.append(val)

        else:
            mix_stranded_groups.append(val)

    for val in mix_stranded_groups:
        strand_group = [strand_info[n] for n in val]
        temp_pos = []
        temp_neg = []

        for n, strand in enumerate(strand_group):
            if strand == "+":
                temp_pos.append(val[n])
            else:
                temp_neg.append(val[n])

        seperated_stranded_groups.append(temp_pos)
        seperated_stranded_groups.append(temp_neg)

    return seperated_stranded_groups + singletons + same_stranded_groups


def annotate_grouped_contigs(sorted_contigs, annotation_dictionary):
    """
    Creates new NLR annotations for groups of contigs and counts the occurence of each NLR annotation in the grouped contigs
    E.g ['CC-NBARC', 'NBARC', 'NBARC-LRR'] would be classified as CC-NBARC-LRR

    :param sorted_contigs: list of contig groups organised by strand using filter_by_strand
    :param annotation_dictionary: A dictionary with the NLR annotation of each ech contig generated by load_annotation_data
    :return: A dictionary with a total count of each NLR type found in the list of grouped contigs
    """

    logging.info('annotating contigs...')
    annotations = sorted([sorted([annotation_dictionary[n] for n in val]) for val in sorted_contigs], key=len,
                         reverse=True)

    nlr_count = {k: 0 for k in set([item for sublist in annotations for item in sublist])}
    nlr_count['CLUSTER'] = 0

    for val in annotations:
        if len(val) == 1:
            nlr_count[val[0]] += 1

        elif val == ['NBARC', 'NBARC-LRR']:
            nlr_count['NBARC-LRR'] += 1

        elif val == ['CC-NBARC', 'NBARC']:
            nlr_count['CC-NBARC'] += 1

        elif val == ['NBARC', 'NBARC']:
            nlr_count['NBARC'] += 1

        elif val == ['CC-NBARC', 'NBARC', 'NBARC-LRR']:
            nlr_count['CC-NBARC-LRR'] += 1

        elif val == ['CC-NBARC', 'NBARC-LRR']:
            nlr_count['CC-NBARC-LRR'] += 1

        else:
            nlr_count['CLUSTER'] += 1

            for annot in val:
                nlr_count[annot] += 1

    return nlr_count


def generate_assembly_grouping_statistics(assembly_nlr_data, grouping_nlr_data):
    """
    laods the NLR annotations for the grouped contigs and the original assembly and compares the difference in number of
    each annotation. Changes are measures as the difference in count and percentage change respective to the original
    assembly.

    :param assembly_nlr_data: path to NLR annotations for the original assembly
    :param grouping_nlr_data: dicitonary of NLR annotation counts for the newly grouped contigs
    :return: a csv file containing the comparison of the original assembly and pipelined assembly annotations
    """
    logging.info('calculating assembly statistics')
    assembly = pd.read_csv(assembly_nlr_data, sep="\t", header=None)
    comparison_counts = {'assembly': assembly[2].value_counts().to_dict(), 'cosine_grouping': grouping_nlr_data}
    data = pd.DataFrame(comparison_counts)
    data.drop([index for index in data.index if 'TIR' in index], inplace=True)

    data['relative_change'] = data.cosine_grouping - data.assembly

    data['percentage_change'] = 100 * (data.cosine_grouping / data.assembly) - 100
    data.fillna(0).astype(int)

    data.to_csv('assembly_statistics.txt', sep='\t')


def write_grouped_contig_fasta(assembly, grouped_contigs):
    """
    converts lists of grouped contigs into a dictionary where each key is the contig ID and the value is concatenated
    sequence of all contigs in the group. For groups with more than 1 element, contigs spaced by 1000 N's. All sequence
    information comes from the orignal assembly.

    :param assembly: fasta file containing the sequences for all contigs in the original assembly
    :param grouped_contigs: list of grouped contigs generated by filter_by_strand
    :return: a fasta file containing the sequence all NLR contigs (new and old) generated by the pipeline.
    """

    logging.info('writing contigs to fasta file...')
    contig_sequence = {}
    with open(assembly) as file:
        for line in file:
            if line.startswith('>'):
                contig_sequence[line[1:-1]] = next(file)[:-1]

    spacer = 'N' * 1000
    seqs = {">" + "_".join(contig): f"{spacer}".join(list(map(contig_sequence.get, contig))) for contig in
            grouped_contigs}

    with open('grouped_assemblies.fa', 'w') as file:
        for k, v in seqs.items():
            file.write(k + "\n")
            file.write(v + "\n")


@click.command()
@click.option('-i', '--input_data', type=str, required=True, help="pickle file generated with calculate_cosine")
@click.option('-n', '--nlr', type=str, required=True, help="NLR annotator file")
@click.option('-c', '--assembly_contigs', type=str, required=True, help="assembly contigs fasta file")
def group_contigs(input_data, nlr, assembly_contigs):
    contig_annotations, contig_strands = load_annotation_data(nlr)
    contigs = load_pickled_data(input_data)
    strand_filtered_contigs = filter_by_strand(contig_strands, contigs)
    annotated_grouped_contigs = annotate_grouped_contigs(strand_filtered_contigs, contig_annotations)
    generate_assembly_grouping_statistics(nlr, annotated_grouped_contigs)
    write_grouped_contig_fasta(assembly_contigs, annotated_grouped_contigs)
